import numpy as np
import tensorflow as tf
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Embedding, Conv1D, MaxPooling1D, LSTM, Dense, Flatten, Dropout
from collections import deque, defaultdict
import random

# Ask the user for input
user_input = input("Enter the opcode sequence as comma-separated values (e.g., 97,0,216,97,2,174,86,91): ")

# Convert the input string into a list of integers
input_sequence = list(map(int, user_input.split(',')))

print("Input Sequence:", input_sequence)

# Convert input sequence to numpy array
#input_sequence = np.array([50,96,20,82,128,21,97,1,200,87])



# Example opcode sequences with associated vulnerabilities
training_data = [
    (np.array([96, 128, 96, 64, 82, 52, 128, 21, 96, 14, 87]), 1),  # Reentrancy
    (np.array([95, 53, 96, 224, 28, 128, 99, 18, 6, 95]), 0),  # Overflow
    (np.array([99, 208, 227, 13, 176, 20, 97, 0, 208, 87]), 3),  # Unauthorized Access
    (np.array([115, 255, 255, 255, 255, 255, 255, 255]), 4),  # Gas Efficiency
    (np.array([97, 0, 216, 97, 2, 174, 86, 91]), 5),  # Self-Destruct
    (np.array([95, 96, 32, 82, 128, 95, 82, 96]), 2)  # Frontrunning
]

for seq, label in training_data:
    if np.array_equal(input_sequence, seq):
        print(f"Matching sequence found in training data with label: {label}")

# Check if this exact sequence exists in the dataset
existing_sequences = [td[0] for td in training_data]

if not any(np.array_equal(input_sequence, seq) for seq in existing_sequences):
    print("New opcode sequence detected:", input_sequence)
    # Log it and add it to dataset
    training_data.append((input_sequence, 6))  # Use -1 for unknown class
else:
    print("Sequence exists in training data.")

# Model Parameters
state_size = max(len(seq) for seq, _ in training_data)
global action_size
action_size = 6  # Number of vulnerability classes
vocab_size = 300
embedding_dim = 128
#input_length = state_size

# Dictionary to track unknown vulnerabilities
unknown_vulnerabilities = defaultdict(int)
new_vulnerabilities = {}

def pad_sequence(seq, max_len):
    return np.pad(seq, (0, max_len - len(seq)), 'constant')

training_data = [(pad_sequence(seq, state_size), label) for seq, label in training_data]
#print("This is the TD:", training_data)

class DQNAgent:
    def __init__(self, state_size, action_size, vocab_size, embedding_dim):
        self.state_size = state_size
        self.action_size = action_size
        self.memory = deque(maxlen=2000)
        self.gamma = 0.95
        self.epsilon = 1.0
        self.epsilon_min = 0.01
        self.epsilon_decay = 0.995
        self.learning_rate = 0.001
        self.vocab_size = vocab_size
        self.embedding_dim = embedding_dim
        #self.input_length = input_length
        self.model = self._build_model()

    def _build_model(self):
        model = Sequential()
        model.add(Embedding(input_dim=self.vocab_size, output_dim=self.embedding_dim))
        model.add(Conv1D(filters=64, kernel_size=3, activation='relu'))
        model.add(MaxPooling1D(pool_size=2))
        model.add(LSTM(64, return_sequences=True))
        model.add(Dropout(0.2))
        model.add(Conv1D(filters=128, kernel_size=3, activation='relu'))
        model.add(MaxPooling1D(pool_size=2))
        model.add(Flatten())
        model.add(Dense(64, activation='relu'))
        model.add(Dropout(0.3))
        model.add(Dense(self.action_size, activation='linear'))
        model.compile(optimizer=tf.keras.optimizers.Adam(learning_rate=self.learning_rate), loss='mse')
        return model

    def remember(self, state, action, reward, next_state, done):
        self.memory.append((state, action, reward, next_state, done))

    def act(self, state):
        if np.random.rand() <= self.epsilon:
            return random.randrange(self.action_size + 1)  # Allow for unknown actions
        act_values = self.model.predict(state, verbose=0)
        chosen_action = np.argmax(act_values[0])
        if np.random.rand() < 0.05:
            return self.action_size  # Introduce a small chance for unknown vulnerabilities
        return chosen_action

    def replay(self, batch_size):
        minibatch = random.sample(self.memory, batch_size)
        for state, action, reward, next_state, done in minibatch:
            if action >= self.action_size:
                action = self.action_size - 1  # Prevent out-of-bounds error

            target = reward
            if not done:
                target = (reward + self.gamma * np.amax(self.model.predict(next_state, verbose=0)[0]))
            target_f = self.model.predict(state, verbose=0)
            if len(target_f[0]) <= action:
                continue  # Skip if the action index is invalid
            target_f[0][action] = target
            self.model.fit(state, target_f, epochs=1, verbose=0)

        if self.epsilon > self.epsilon_min:
            self.epsilon *= self.epsilon_decay

    def load_weights(self, name):
        self.model.load_weights(name)

    def save_weights(self, name):
        self.model.save_weights(name)

padded_sequence = pad_sequence(np.array(input_sequence), state_size)
print("Padded Sequence:", padded_sequence)


# Initialize agent
agent = DQNAgent(state_size, action_size, vocab_size, embedding_dim)

def process_input(opcode_sequence):
    global action_size
    opcode_sequence = pad_sequence(np.array(opcode_sequence), state_size).reshape(1, state_size)
    action = agent.act(opcode_sequence)
    
    if action >= action_size:  # Unknown vulnerability
        unknown_vulnerabilities[tuple(opcode_sequence[0])] += 1
        if unknown_vulnerabilities[tuple(opcode_sequence[0])] == 1:
            print(f"Unknown vulnerability detected: {opcode_sequence[0]}. Logging it for future analysis.")
        elif unknown_vulnerabilities[tuple(opcode_sequence[0])] == 2:
            print(f"Recognized new vulnerability pattern: {opcode_sequence[0]}. Adding to dataset.")
            action_size += 1
            new_vulnerabilities[tuple(opcode_sequence[0])] = action_size - 1
            training_data.append((opcode_sequence[0], action_size - 1))
            agent.model.fit(np.array([td[0] for td in training_data]), np.array([td[1] for td in training_data]), epochs=1, verbose=0)
    elif action == action_size:
        print(f"New sequence added without a label: {opcode_sequence[0]}. It is being tracked for future classification.")

     
    return action


predicted_class = process_input(input_sequence)
print(f"Predicted class for the input: {predicted_class}")

# Training setup
ep = 20
batch_size = 32

for e in range(ep):
    for opcode_sequence, correct_label in training_data:
        state = opcode_sequence.reshape(1, state_size)
        action = agent.act(state)

        reward = 1 if action == correct_label else -1
        next_state = state
        done = True
        agent.remember(state, action, reward, next_state, done)

        if len(agent.memory) > batch_size:
            agent.replay(batch_size)

    print(f"Episode {e}/{ep} - Predicted Class: {action} - Correct Class: {correct_label} - Epsilon: {agent.epsilon}")

# Process the new input
predicted_class = process_input(input_sequence)
print(f"Predicted class for the input: {predicted_class}")

# Save trained model
agent.save_weights('dqn_modnn_vulnerability_detection.weights.h5')
